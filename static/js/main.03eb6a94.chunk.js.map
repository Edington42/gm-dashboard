{"version":3,"sources":["context/DashboarContex.tsx","util/Roller.ts","common/DieIcon.tsx","context/RollLogContext.tsx","components/dashboard/AbilityRollCard.tsx","components/dashboard/Action.tsx","components/dashboard/ActionArea.tsx","context/EditContext.tsx","components/stats/StatBlock.tsx","components/dashboard/MonsterCard.tsx","components/dashboard/CustomRollCard.tsx","components/dashboard/MonsteArea.tsx","components/header/HeaderMenu.tsx","components/header/Header.tsx","components/editor/Editor.tsx","components/roll_log/RollText.tsx","components/roll_log/ActionRollLogItem.tsx","components/roll_log/ActionRollTitle.tsx","components/roll_log/ActionRollLog.tsx","components/roll_log/RollLog.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["DashboardContext","createContext","dash","clearDash","exportDash","importDash","e","saveMonster","monsterText","deleteMonster","id","DashboardProvider","children","dashInit","localStorage","getItem","useState","JSON","parse","setDash","Provider","value","removeItem","a","document","createElement","file","Blob","stringify","type","href","URL","createObjectURL","download","click","target","files","reader","FileReader","onload","result","text","setItem","readAsText","toSave","length","newArray","filter","item","ABILITY_ROLL_DEFAULT","bonus","toRoll","sides","count","rolls","textToDice","dieText","split","parseInt","rollDie","roll","Math","trunc","random","rollToIconClass","className","Map","DieIcon","RollLogContext","rollLog","logRoll","actionDetailsToResults","details","results","map","detail","title","rollTitle","i","total","diceRolls","forEach","die","dieRoll","push","dice","rollDice","monsterName","actionName","RollLogProvider","useReducer","state","AbilityRollCard","mods","posCustomMod","setPosCustomMod","negCustomMod","setNegCustomMod","useContext","handleChange","valueString","modifier","Grid","xs","Button","onClick","variant","BUTTON_MOD_MAX","posOptions","negOptions","MenuItem","FormControl","fullWidth","InputLabel","Select","labelId","onChange","event","Card","CardContent","style","paddingLeft","paddingRight","Typography","display","container","spacing","Action","action","expanded","setExpanded","toggleExpand","stats","data","attack_bonus","damage_bonus","damage_dice","name","toDetails","ListItem","padding","ListItemButton","desc","ListItemIcon","ListItemText","primary","Collapse","in","ActionArea","monster","actions","reactions","legendary_actions","area","List","EditContext","isEditing","editText","editSaved","textChange","toggleEdit","setEditText","EditProvider","setEditing","StatBlock","speeds","Object","entries","speed","key","absToString","abs","mod","absToMod","floor","svToMod","sv","statValues","strength","dexterity","constitution","intelligence","wisdom","charisma","saveValues","strength_save","dexterity_save","constitution_save","intelligence_save","wisdom_save","charisma_save","statNameLabels","statValueLabels","index","saveNameLabels","saveValueLabels","prof","skills","special_abilities","Divider","light","damage_vulnerabilities","damage_resistances","damage_immunities","condition_immunities","senses","languages","legendary_desc","MonsterCard","console","log","float","margin","armor_class","hit_points","DICE","CustomRollCard","counts","initialDiceCounts","diceCounts","setDiceCounts","j","BUTTON_COUNT_MAX","optionList","newCounts","icons","columns","MonsteArea","HeaderMenu","anchorEl","isOpen","handleClose","Menu","open","onClose","htmlFor","hidden","onInput","Header","monsterList","setMonsterList","setAnchorEl","Boolean","useEffect","fetch","then","response","json","monsters","names","undefined","AppBar","position","Toolbar","Box","disabled","selected","fontSize","IconButton","Editor","rows","RollText","rollIcons","ActionRollLogItem","titled","totals","toString","rollText","ActionRollTitle","actorName","titleString","ActionRollLog","actionResults","hasTitle","RollLog","logItem","Paper","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.03eb6a94.chunk.js","sourcesContent":["import React, { ChangeEvent, createContext, useState } from \"react\";\r\nimport { MonsterData } from \"../data/MonsterData\";\r\n\r\nexport interface DashboardContent {\r\n  dash: DashboardItem[];\r\n  clearDash: () => void;\r\n  exportDash: () => void;\r\n  importDash: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  saveMonster: (monsterText: string) => void;\r\n  deleteMonster: (id: number) => void;\r\n}\r\n\r\nexport const DashboardContext = createContext<DashboardContent>({\r\n  dash: [],\r\n  clearDash: () => {},\r\n  exportDash: () => {},\r\n  importDash: (e: ChangeEvent<HTMLInputElement>) => {},\r\n  saveMonster: (monsterText: string) => {},\r\n  deleteMonster: (id: number) => {},\r\n});\r\n\r\nexport interface DashboardItem extends MonsterData {\r\n  id: number;\r\n}\r\n\r\nexport const DashboardProvider: React.FC<{}> = ({ children }) => {\r\n  const dashInit = localStorage.getItem(\"dash\");\r\n  const [dash, setDash] = useState<DashboardItem[]>(\r\n    dashInit ? JSON.parse(dashInit) : []\r\n  );\r\n\r\n  function clearDash() {\r\n    localStorage.removeItem(\"dash\");\r\n    setDash([]);\r\n  }\r\n\r\n  function exportDash() {\r\n    const a = document.createElement(\"a\");\r\n    const file = new Blob([JSON.stringify(dash)], { type: \"text/plain\" });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = \"Dashboard\";\r\n    a.click();\r\n  }\r\n\r\n  function importDash(e: ChangeEvent<HTMLInputElement>) {\r\n    if (e.target !== null && e.target.files !== null) {\r\n      const reader = new FileReader();\r\n      reader.onload = async (e: ProgressEvent<FileReader>) => {\r\n        if (\r\n          e !== null &&\r\n          e.target !== null &&\r\n          typeof e.target.result === \"string\"\r\n        ) {\r\n          const text = e.target.result;\r\n          localStorage.setItem(\"dash\", text);\r\n          setDash(JSON.parse(text));\r\n        }\r\n      };\r\n      reader.readAsText(e.target.files[0]);\r\n    }\r\n  }\r\n\r\n  function saveMonster(monsterText: string) {\r\n    let toSave = JSON.parse(monsterText);\r\n    let id = dash.length;\r\n    toSave.id = id;\r\n    let newArray = [...dash, toSave];\r\n    setDash(newArray);\r\n    localStorage.setItem(\"dash\", JSON.stringify(newArray));\r\n  }\r\n\r\n  function deleteMonster(id: number) {\r\n    let newArray = dash.filter((item) => item.id !== id);\r\n    setDash(newArray);\r\n    localStorage.setItem(\"dash\", JSON.stringify(newArray));\r\n  }\r\n\r\n  return (\r\n    <DashboardContext.Provider\r\n      value={{\r\n        dash,\r\n        clearDash,\r\n        exportDash,\r\n        importDash,\r\n        saveMonster,\r\n        deleteMonster,\r\n      }}\r\n    >\r\n      {children}\r\n    </DashboardContext.Provider>\r\n  );\r\n};\r\n","import { ActionData } from \"../data/ActionData\";\r\n\r\nexport interface Dice {\r\n  count: number;\r\n  sides: number;\r\n}\r\n\r\nexport interface DiceRollDetails {\r\n  rollTitle?: string;\r\n  bonus: number;\r\n  toRoll: Dice[];\r\n  rolls: number;\r\n}\r\n\r\nexport const ABILITY_ROLL_DEFAULT: DiceRollDetails = {\r\n  bonus: 0,\r\n  toRoll: [{ sides: 20, count: 1 }],\r\n  rolls: 2,\r\n};\r\n\r\nexport interface MultiRoll {\r\n  bonus: number;\r\n  rolls: DiceRoll[];\r\n  title?: string;\r\n}\r\n\r\nexport interface DiceRoll {\r\n  dice: DieRoll[];\r\n  total: number;\r\n}\r\n\r\nexport interface DieRoll {\r\n  roll: number;\r\n  sides: number;\r\n}\r\n\r\nexport interface AbilityRoll {\r\n  initialRollTotal: number;\r\n  advDsvRollTotal: number;\r\n  initialRoll: DieRoll;\r\n  advDsvRoll: DieRoll;\r\n  bonus: number;\r\n}\r\n\r\nexport function rollAttack(bonus: number): AbilityRoll {\r\n  let initialRoll = rollDie(20);\r\n  let advDsvRoll = rollDie(20);\r\n  let initialRollTotal = initialRoll.roll + bonus;\r\n  let advDsvRollTotal = advDsvRoll.roll + bonus;\r\n\r\n  return {\r\n    initialRollTotal: initialRollTotal,\r\n    advDsvRollTotal: advDsvRollTotal,\r\n    initialRoll: initialRoll,\r\n    advDsvRoll: advDsvRoll,\r\n    bonus: bonus,\r\n  };\r\n}\r\n\r\nexport function rollDice(details: DiceRollDetails): MultiRoll {\r\n  let result: MultiRoll = {\r\n    title: details.rollTitle,\r\n    bonus: details.bonus,\r\n    rolls: <DiceRoll[]>[],\r\n  };\r\n  for (let i = 0; i < details.rolls; i++) {\r\n    let total = 0;\r\n    let diceRolls: DieRoll[] = [];\r\n    details.toRoll.forEach((die) => {\r\n      for (let i = 0; i < die.count; i++) {\r\n        let dieRoll = rollDie(die.sides);\r\n        total += dieRoll.roll;\r\n        diceRolls.push(dieRoll);\r\n      }\r\n    });\r\n    total += details.bonus;\r\n    result.rolls.push({ dice: diceRolls, total: total });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function textToDice(text: string): Dice {\r\n  let dieText = text.split(\"d\");\r\n  return { count: parseInt(dieText[0]), sides: parseInt(dieText[1]) };\r\n}\r\n\r\nfunction rollDie(sides: number): DieRoll {\r\n  return { roll: Math.trunc(Math.random() * sides + 1), sides: sides };\r\n}\r\n\r\nexport function rollToIconClass({ sides, roll }: DieRoll) {\r\n  let className = \"df-d\";\r\n  className += sides;\r\n  className += \"-\";\r\n  className += roll;\r\n  return className;\r\n}\r\n\r\n/*Font Dice*/\r\n\r\nconst D4_1 = 97;\r\nconst D6_1 = 65;\r\nconst D8_1 = 101;\r\nconst D10_1 = 49;\r\nconst D12_1 = 109;\r\nconst D20_1 = 71;\r\n\r\nconst sidesToIndex = new Map<number, number>([\r\n  [4, 97],\r\n  [6, 65],\r\n  [8, 101],\r\n  [10, 49],\r\n  [12, 109],\r\n  [20, 71],\r\n]);\r\n\r\nconst D10_10_INDEX = 48;\r\n\r\nfunction rollToDieText({ sides, roll }: DieRoll) {\r\n  if (sides === 10 && roll === 10) {\r\n    return 0;\r\n  }\r\n  let code = 0;\r\n  let index = sidesToIndex.get(sides);\r\n  if (index) {\r\n    code = index + roll - 1;\r\n  }\r\n  return String.fromCharCode(code);\r\n}\r\n","import { DieRoll, rollToIconClass } from \"../util/Roller\";\r\nimport \"./css/DieIcon.css\";\r\n\r\ninterface IProps {\r\n  roll: DieRoll;\r\n}\r\nexport function DieIcon({ roll }: IProps) {\r\n  return <i className={rollToIconClass(roll) + \" die-icon\"} />;\r\n}\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { ActionData } from \"../data/ActionData\";\r\nimport {\r\n  ABILITY_ROLL_DEFAULT,\r\n  DiceRollDetails,\r\n  MultiRoll,\r\n  rollAttack,\r\n  rollDice,\r\n  textToDice,\r\n} from \"../util/Roller\";\r\n\r\nexport interface ActionDetails {\r\n  monsterName?: string;\r\n  actionName?: string;\r\n  rolls: DiceRollDetails[];\r\n}\r\n\r\nexport interface ActionResults {\r\n  monsterName?: string;\r\n  actionName?: string;\r\n  rolls: MultiRoll[];\r\n}\r\n\r\nexport interface RollLogContent {\r\n  rollLog: ActionResults[];\r\n  logRoll: (details: ActionDetails) => void;\r\n}\r\n\r\nexport const RollLogContext = createContext<RollLogContent>({\r\n  rollLog: [],\r\n  logRoll: () => {},\r\n});\r\n\r\nfunction actionDetailsToResults(details: ActionDetails): ActionResults {\r\n  let results = details.rolls.map((detail) => {\r\n    return rollDice(detail);\r\n  });\r\n  return {\r\n    monsterName: details.monsterName,\r\n    actionName: details.actionName,\r\n    rolls: results,\r\n  };\r\n}\r\n\r\nexport const RollLogProvider: React.FC<{}> = ({ children }) => {\r\n  function addRoll(\r\n    state: ActionResults[],\r\n    details: ActionDetails\r\n  ): ActionResults[] {\r\n    return [actionDetailsToResults(details), ...state];\r\n  }\r\n  const [rollLog, logRoll] = useReducer(addRoll, []);\r\n\r\n  return (\r\n    <RollLogContext.Provider\r\n      value={{\r\n        rollLog,\r\n        logRoll,\r\n      }}\r\n    >\r\n      {children}\r\n    </RollLogContext.Provider>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { ChangeEvent, ReactElement, useContext, useState } from \"react\";\r\nimport { DieIcon } from \"../../common/DieIcon\";\r\nimport { RollLogContext } from \"../../context/RollLogContext\";\r\nimport { ABILITY_ROLL_DEFAULT, rollToIconClass } from \"../../util/Roller\";\r\n\r\nconst BUTTON_MOD_MAX = 5;\r\nconst MOD_MAX = 30;\r\n\r\nexport function AbilityRollCard() {\r\n  const mods: ReactElement[] = [];\r\n  const [posCustomMod, setPosCustomMod] = useState<number>(0);\r\n  const [negCustomMod, setNegCustomMod] = useState<number>(0);\r\n  const { logRoll } = useContext(RollLogContext);\r\n\r\n  function handleChange(valueString: string) {\r\n    let value: number = parseInt(valueString);\r\n    value > 0 ? setPosCustomMod(value) : setNegCustomMod(value);\r\n  }\r\n\r\n  function roll(modifier: number) {\r\n    logRoll({\r\n      rolls: [\r\n        {\r\n          ...ABILITY_ROLL_DEFAULT,\r\n          bonus: modifier,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < BUTTON_MOD_MAX + 1; i++) {\r\n    mods.push(\r\n      <>\r\n        <Grid item xs={6}>\r\n          <Button\r\n            onClick={() => roll(i)}\r\n            variant=\"contained\"\r\n            className=\"mod-button\"\r\n          >\r\n            +{i}\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Button\r\n            onClick={() => roll(-i)}\r\n            variant=\"outlined\"\r\n            className=\"mod-button\"\r\n          >\r\n            -{i}\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const posOptions: JSX.Element[] = [];\r\n  const negOptions: JSX.Element[] = [];\r\n\r\n  for (let i = BUTTON_MOD_MAX; i < MOD_MAX; i++) {\r\n    posOptions.push(\r\n      <MenuItem onClick={() => roll(i)} value={+i}>\r\n        +{i}\r\n      </MenuItem>\r\n    );\r\n    negOptions.push(\r\n      <MenuItem onClick={() => roll(-i)} value={-i}>\r\n        -{i}\r\n      </MenuItem>\r\n    );\r\n  }\r\n\r\n  mods.push(\r\n    <>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"positive-bonus-label\">+ Bonus </InputLabel>\r\n          <Select\r\n            labelId=\"positive-bonus-label\"\r\n            className=\"mod-button select-mod\"\r\n            variant=\"outlined\"\r\n            value={posCustomMod}\r\n            onChange={(event) => handleChange(event.target.value as string)}\r\n          >\r\n            {posOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"negative-bonus-label\">- Bonus</InputLabel>\r\n          <Select\r\n            labelId=\"negative-bonus-label\"\r\n            className=\"mod-button select-mod\"\r\n            value={negCustomMod}\r\n            onChange={(event) => handleChange(event.target.value as string)}\r\n            variant=\"outlined\"\r\n          >\r\n            {negOptions}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <Card className=\"monster\">\r\n      <CardContent style={{ paddingLeft: \".25em\", paddingRight: \".25em\" }}>\r\n        <Typography variant=\"h6\" style={{ display: \"inline\" }}>\r\n          Ability Roll <DieIcon roll={{ sides: 20, roll: 20 }} />|\r\n          <DieIcon roll={{ sides: 20, roll: 20 }} />\r\n        </Typography>\r\n        <Grid container className=\"mod-grid\" spacing={2}>\r\n          {mods}\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport { ActionDetails, RollLogContext } from \"../../context/RollLogContext\";\r\nimport {\r\n  ABILITY_ROLL_DEFAULT,\r\n  DiceRollDetails,\r\n  rollDice,\r\n  textToDice,\r\n} from \"../../util/Roller\";\r\nimport { ActionData } from \"../../data/ActionData\";\r\nimport {\r\n  Collapse,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n//import { ArrowDropDownIcon, ArrowDropUpIcon } from \"@material-ui/icons\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\nimport ArrowDropUpIcon from \"@mui/icons-material/ArrowDropUp\";\r\nimport CasinoIcon from \"@mui/icons-material/Casino\";\r\nimport { ListItemButton, ListItemIcon } from \"@mui/material\";\r\n\r\ninterface IProps {\r\n  action: ActionData;\r\n}\r\n\r\nfunction toDetails(data: ActionData): ActionDetails {\r\n  let rolls: DiceRollDetails[] = [];\r\n  rolls.push({\r\n    ...ABILITY_ROLL_DEFAULT,\r\n    rollTitle: \"To Hit:\",\r\n    bonus: data.attack_bonus,\r\n  });\r\n\r\n  rolls.push({\r\n    rollTitle: \"Damage:\",\r\n    bonus: data.damage_bonus,\r\n    toRoll: [textToDice(data.damage_dice)],\r\n    rolls: 1,\r\n  });\r\n\r\n  return {\r\n    monsterName: data.monsterName,\r\n    actionName: data.name,\r\n    rolls: rolls,\r\n  };\r\n}\r\n\r\nexport function Action({ action }: IProps) {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const { logRoll } = useContext(RollLogContext);\r\n\r\n  function toggleExpand() {\r\n    setExpanded(!expanded);\r\n  }\r\n\r\n  function roll(stats: ActionData) {\r\n    logRoll(toDetails(stats));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListItem style={{ padding: \"0px\", paddingRight: \"4px\" }}>\r\n        <ListItemButton\r\n          style={{ padding: \"0px\", paddingRight: \"4px\" }}\r\n          title={action.desc}\r\n          onClick={(e) => roll(action)}\r\n        >\r\n          <ListItemIcon>\r\n            <CasinoIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary={action.name} />\r\n        </ListItemButton>\r\n        {expanded ? (\r\n          <ArrowDropUpIcon onClick={toggleExpand} />\r\n        ) : (\r\n          <ArrowDropDownIcon onClick={toggleExpand} />\r\n        )}\r\n      </ListItem>\r\n      <Collapse in={expanded}>\r\n        <Typography variant=\"body1\">{action.desc}</Typography>\r\n      </Collapse>\r\n    </>\r\n  );\r\n}\r\n","import { Action } from \"./Action\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { MonsterData } from \"../../data/MonsterData\";\r\n\r\ninterface IProps {\r\n  monster: MonsterData;\r\n}\r\n\r\nexport function ActionArea({ monster }: IProps) {\r\n  let actions = [\r\n    ...monster.actions,\r\n    ...monster.reactions,\r\n    ...monster.legendary_actions,\r\n  ];\r\n  let name = monster.name;\r\n  let area = actions.map((action) => (\r\n    <Action key={action.name} action={{ ...action, monsterName: name }} />\r\n  ));\r\n  return <List>{area}</List>;\r\n}\r\n","import React, { ChangeEvent, createContext, useState } from \"react\";\r\nimport { MonsterData } from \"../data/MonsterData\";\r\n\r\nexport interface EditContenet {\r\n  isEditing: boolean;\r\n  editText: string;\r\n  editSaved: (stats: MonsterData) => void;\r\n  textChange: (e: ChangeEvent<HTMLTextAreaElement>) => void;\r\n  toggleEdit: () => void;\r\n  setEditText: (text: string) => void;\r\n}\r\n\r\nexport const EditContext = createContext<EditContenet>({\r\n  isEditing: false,\r\n  editText: \"\",\r\n  editSaved: (stats: MonsterData) => {},\r\n  textChange: (e: ChangeEvent<HTMLTextAreaElement>) => {},\r\n  toggleEdit: () => {},\r\n  setEditText: (text: string) => {},\r\n});\r\n\r\nexport const EditProvider: React.FC<{}> = ({ children }) => {\r\n  const [editText, setEditText] = useState(\"\");\r\n  const [isEditing, setEditing] = useState(false);\r\n\r\n  function editSaved(stats: MonsterData) {\r\n    setEditing(true);\r\n    setEditText(JSON.stringify(stats));\r\n  }\r\n\r\n  function textChange(e: ChangeEvent<HTMLTextAreaElement>) {\r\n    setEditText(e.target.value);\r\n  }\r\n\r\n  function toggleEdit() {\r\n    setEditing(!isEditing);\r\n  }\r\n\r\n  return (\r\n    <EditContext.Provider\r\n      value={{\r\n        editText,\r\n        isEditing,\r\n        editSaved,\r\n        textChange,\r\n        toggleEdit,\r\n        setEditText,\r\n      }}\r\n    >\r\n      {children}\r\n    </EditContext.Provider>\r\n  );\r\n};\r\n","import { Divider, Grid, Typography } from \"@material-ui/core\";\r\nimport { statSync } from \"fs\";\r\nimport { MonsterData } from \"../../data/MonsterData\";\r\n\r\nexport function StatBlock({ stats }: { stats: MonsterData }) {\r\n  let speeds = Object.entries(stats.speed).map(([key, value]) => (\r\n    <Typography key={key} variant=\"body1\">\r\n      {key}:{\" \" + value}ft\r\n    </Typography>\r\n  ));\r\n\r\n  function absToString(abs: number) {\r\n    let mod = absToMod(abs);\r\n    return abs + \" (\" + (mod >= 0 ? \"+\" : \"-\") + Math.abs(mod) + \")\";\r\n  }\r\n\r\n  function absToMod(abs: number) {\r\n    return Math.floor((abs - 10) / 2);\r\n  }\r\n\r\n  function svToMod(sv: number | null, abs: number) {\r\n    if (sv === null) {\r\n      sv = absToMod(abs);\r\n    }\r\n    return \" (\" + (sv >= 0 ? \"+\" : \"-\") + Math.abs(sv) + \")\";\r\n  }\r\n\r\n  let statNames = [\"STR\", \"DEX\", \"CON\", \"INT\", \"WIS\", \"CHA\"];\r\n  let statValues = [\r\n    absToString(stats.strength),\r\n    absToString(stats.dexterity),\r\n    absToString(stats.constitution),\r\n    absToString(stats.intelligence),\r\n    absToString(stats.wisdom),\r\n    absToString(stats.charisma),\r\n  ];\r\n  let saveNames = [\"STRsv\", \"DEXsv\", \"CONsv\", \"INTsv\", \"WISsv\", \"CHAsv\"];\r\n  let saveValues = [\r\n    svToMod(stats.strength_save, stats.strength),\r\n    svToMod(stats.dexterity_save, stats.dexterity),\r\n    svToMod(stats.constitution_save, stats.constitution),\r\n    svToMod(stats.intelligence_save, stats.intelligence),\r\n    svToMod(stats.wisdom_save, stats.wisdom),\r\n    svToMod(stats.charisma_save, stats.charisma),\r\n  ];\r\n\r\n  let statNameLabels = statNames.map((name) => (\r\n    <Grid item key={name} xs={2}>\r\n      <Typography variant=\"body1\">{name}</Typography>\r\n    </Grid>\r\n  ));\r\n\r\n  let statValueLabels = statValues.map((value, index) => (\r\n    <Grid item key={index} xs={2}>\r\n      <Typography variant=\"caption\">{value}</Typography>\r\n    </Grid>\r\n  ));\r\n\r\n  let saveNameLabels = saveNames.map((name) => (\r\n    <Grid item key={name} xs={2}>\r\n      <Typography variant=\"body2\">{name}</Typography>\r\n    </Grid>\r\n  ));\r\n\r\n  let saveValueLabels = saveValues.map((value, index) => (\r\n    <Grid item key={index} xs={2}>\r\n      <Typography variant=\"caption\">{value}</Typography>\r\n    </Grid>\r\n  ));\r\n\r\n  let prof = Object.entries(stats.skills).map(([key, value]) => (\r\n    <Typography key={key} variant=\"body1\">\r\n      {key}:{\" \" + value}\r\n    </Typography>\r\n  ));\r\n\r\n  let specialAbilitis = Object.entries(stats.special_abilities).map(\r\n    ([key, value]) => (\r\n      <Typography key={key} variant=\"body1\">\r\n        {key}:{\" \" + value}\r\n      </Typography>\r\n    )\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Divider light />\r\n      {speeds}\r\n      <Divider light />\r\n      <Grid container className=\"count-grid\" spacing={0}>\r\n        {statNameLabels}\r\n        {statValueLabels}\r\n        <Grid item xs={12}>\r\n          <Divider light />\r\n        </Grid>\r\n        {saveNameLabels}\r\n        {saveValueLabels}\r\n      </Grid>\r\n      <Divider light />\r\n      {prof.length > 0 && (\r\n        <>\r\n          {prof}\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.damage_vulnerabilities && (\r\n        <>\r\n          <Typography>\r\n            Damage Vulnerabilities:{\" \" + stats.damage_vulnerabilities}\r\n          </Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.damage_resistances && (\r\n        <>\r\n          <Typography>\r\n            Damage Resitatnces:{\" \" + stats.damage_resistances}\r\n          </Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.damage_immunities && (\r\n        <>\r\n          <Typography>\r\n            Damage Immunities:{\" \" + stats.damage_immunities}\r\n          </Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.condition_immunities && (\r\n        <>\r\n          <Typography>\r\n            Condition Immunities:{\" \" + stats.condition_immunities}\r\n          </Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.senses && (\r\n        <>\r\n          <Typography>Senses:{\" \" + stats.senses}</Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.languages && (\r\n        <>\r\n          <Typography>Languages:{\" \" + stats.languages}</Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      {stats.legendary_desc && (\r\n        <>\r\n          <Typography>Legendary Desc:{\" \" + stats.legendary_desc}</Typography>\r\n          <Divider light />\r\n        </>\r\n      )}\r\n      Special Abilities\r\n      <Divider light />\r\n      Spell Desc?\r\n      <Divider light />\r\n      Spell list to actions?\r\n      <Divider light />\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport { ActionArea } from \"./ActionArea\";\r\nimport { Card, CardContent, Collapse } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { EditContext } from \"../../context/EditContext\";\r\nimport { DashboardContext, DashboardItem } from \"../../context/DashboarContex\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\nimport ArrowDropUpIcon from \"@mui/icons-material/ArrowDropUp\";\r\nimport { StatBlock } from \"../stats/StatBlock\";\r\n\r\ninterface IProps {\r\n  stats: DashboardItem;\r\n}\r\n\r\nexport function MonsterCard({ stats }: IProps) {\r\n  const { editSaved } = useContext(EditContext);\r\n  const { deleteMonster } = useContext(DashboardContext);\r\n  const [expanded, setExpanded] = useState(false);\r\n  function toggleExpand() {\r\n    console.log(\"Expand\");\r\n    setExpanded(!expanded);\r\n  }\r\n\r\n  return (\r\n    <Card className=\"monster\">\r\n      <CardContent style={{ paddingLeft: \".25em\", paddingRight: \".25em\" }}>\r\n        <Typography variant=\"h5\" style={{ display: \"inline\" }}>\r\n          {stats.name}\r\n        </Typography>\r\n        <EditIcon\r\n          onClick={(e) => editSaved(stats)}\r\n          style={{ float: \"right\", margin: \".25em\" }}\r\n        />\r\n        <DeleteIcon\r\n          onClick={(e) => deleteMonster(stats.id)}\r\n          style={{ float: \"right\", margin: \".25em\" }}\r\n        />\r\n        <Typography style={{ display: \"block\" }}>\r\n          AC: {stats.armor_class} HP: {stats.hit_points}\r\n          {expanded ? (\r\n            <ArrowDropUpIcon onClick={toggleExpand} />\r\n          ) : (\r\n            <ArrowDropDownIcon onClick={toggleExpand} />\r\n          )}\r\n        </Typography>\r\n\r\n        <Collapse in={expanded}>\r\n          <StatBlock stats={stats} />\r\n        </Collapse>\r\n        <ActionArea monster={stats} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Select,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  Badge,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { ChangeEvent, ReactElement, useContext, useState } from \"react\";\r\nimport { DieIcon } from \"../../common/DieIcon\";\r\nimport { RollLogContext } from \"../../context/RollLogContext\";\r\nimport {\r\n  ABILITY_ROLL_DEFAULT,\r\n  Dice,\r\n  DiceRoll,\r\n  DiceRollDetails,\r\n  rollToIconClass,\r\n} from \"../../util/Roller\";\r\n\r\nconst BUTTON_COUNT_MAX = 5;\r\nconst COUNT_MAX = 30;\r\n\r\nconst DICE: number[] = [4, 6, 8, 10, 12];\r\n\r\nexport function CustomRollCard() {\r\n  const counts: ReactElement[] = [];\r\n  const initialDiceCounts = DICE.map((die) => {\r\n    return 0;\r\n  });\r\n  const [diceCounts, setDiceCounts] = useState<number[]>(initialDiceCounts);\r\n  const { logRoll } = useContext(RollLogContext);\r\n\r\n  function handleChange(valueString: string, die: number) {\r\n    let value: number = parseInt(valueString);\r\n    let newCounts = [...diceCounts];\r\n    newCounts[die] = value;\r\n    setDiceCounts(newCounts);\r\n  }\r\n\r\n  function roll(count: number, die: number) {\r\n    let dice: Dice = { count: count, sides: DICE[die] };\r\n    logRoll({\r\n      rolls: [\r\n        {\r\n          rolls: 1,\r\n          toRoll: [dice],\r\n          bonus: 0,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  for (let i = 1; i < BUTTON_COUNT_MAX + 1; i++) {\r\n    for (let j = 0; j < DICE.length; j++)\r\n      counts.push(\r\n        <>\r\n          <Grid item xs={2}>\r\n            <Button\r\n              onClick={() => roll(i, j)}\r\n              variant=\"contained\"\r\n              className=\"count-button\"\r\n            >\r\n              {i}\r\n              <DieIcon roll={{ roll: DICE[j], sides: DICE[j] }} />\r\n            </Button>\r\n          </Grid>\r\n        </>\r\n      );\r\n  }\r\n\r\n  const options: JSX.Element[][] = [];\r\n\r\n  for (let i = 0; i < DICE.length; i++) {\r\n    let optionList: JSX.Element[] = [];\r\n    for (let j = BUTTON_COUNT_MAX; j < COUNT_MAX; j++) {\r\n      optionList.push(\r\n        <MenuItem className=\"select-count\" onClick={() => roll(j, i)} value={j}>\r\n          <Typography variant=\"caption\">{j}</Typography>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    counts.push(\r\n      <Grid item xs={2}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id={\"d\" + DICE[i] + \"-label\"}>\r\n            <DieIcon roll={{ roll: DICE[i], sides: DICE[i] }} />\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"positive-bonus-label\"\r\n            className=\"mod-button select-count\"\r\n            variant=\"outlined\"\r\n            value={diceCounts[i]}\r\n            onChange={(event) => handleChange(event.target.value as string, i)}\r\n          >\r\n            {optionList}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  let icons = DICE.map((die) => (\r\n    <DieIcon key={die} roll={{ sides: die, roll: die }} />\r\n  ));\r\n\r\n  return (\r\n    <Card className=\"monster\">\r\n      <CardContent style={{ paddingLeft: \".25em\", paddingRight: \".25em\" }}>\r\n        <Typography variant=\"h6\" style={{ display: \"inline\" }}>\r\n          Custom Roll {icons}\r\n        </Typography>\r\n        <Grid container className=\"count-grid\" spacing={0} columns={10}>\r\n          {counts}\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { DashboardContext, DashboardItem } from \"../../context/DashboarContex\";\r\nimport { AbilityRollCard } from \"./AbilityRollCard\";\r\nimport { MonsterCard } from \"./MonsterCard\";\r\nimport \"./css/Dashboard.css\";\r\nimport { CustomRollCard } from \"./CustomRollCard\";\r\n\r\nexport function MonsteArea() {\r\n  const { dash } = useContext(DashboardContext);\r\n\r\n  let area = dash.map((monster: DashboardItem, index) => (\r\n    <MonsterCard key={index} stats={monster} />\r\n  ));\r\n  return (\r\n    <div className=\"monster-area\">\r\n      <AbilityRollCard />\r\n      <CustomRollCard />\r\n      {area}\r\n    </div>\r\n  );\r\n}\r\n","import Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { useContext } from \"react\";\r\nimport { DashboardContext } from \"../../context/DashboarContex\";\r\nimport { EditContext } from \"../../context/EditContext\";\r\n\r\ninterface IProps {\r\n  anchorEl: Element | null;\r\n  isOpen: boolean;\r\n  handleClose: () => void;\r\n}\r\n\r\nexport function HeaderMenu({ anchorEl, isOpen, handleClose }: IProps) {\r\n  const { clearDash, importDash, exportDash } = useContext(DashboardContext);\r\n\r\n  const { isEditing, toggleEdit } = useContext(EditContext);\r\n\r\n  return (\r\n    <Menu anchorEl={anchorEl} open={isOpen} onClose={handleClose}>\r\n      <MenuItem onClick={toggleEdit}>\r\n        {isEditing ? \"Hide Edit\" : \"Show Edit\"}\r\n      </MenuItem>\r\n      <MenuItem onClick={clearDash}>Clear Dashboard</MenuItem>\r\n      <MenuItem onClick={exportDash}>Export Dashboard</MenuItem>\r\n      <MenuItem>\r\n        <label htmlFor=\"contained-button-file\">\r\n          <input\r\n            id=\"contained-button-file\"\r\n            type=\"file\"\r\n            hidden\r\n            onInput={importDash}\r\n          />\r\n          Import Dashboard\r\n        </label>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n}\r\n","import {\r\n  useState,\r\n  MouseEvent,\r\n  ChangeEvent,\r\n  useEffect,\r\n  ReactElement,\r\n  useContext,\r\n} from \"react\";\r\nimport { MonsterData } from \"../../data/MonsterData\";\r\nimport { AppBar, Toolbar, Box } from \"@material-ui/core\";\r\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\r\nimport { DashboardContext } from \"../../context/DashboarContex\";\r\nimport { EditContext } from \"../../context/EditContext\";\r\nimport { HeaderMenu } from \"./HeaderMenu\";\r\n\r\nexport function Header() {\r\n  const [monsterList, setMonsterList] = useState<MonsterData[]>();\r\n\r\n  const [anchorEl, setAnchorEl] = useState<Element | null>(null);\r\n  const isOpen = Boolean(anchorEl);\r\n\r\n  const handleClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(e.target as Element);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const { saveMonster } = useContext(DashboardContext);\r\n\r\n  const { editText, setEditText } = useContext(EditContext);\r\n\r\n  /* Begin Fetches */\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://api.open5e.com/monsters/?format=json&fields=slug,name&limit=10000\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let monsters = data.results;\r\n        setMonsterList(monsters);\r\n      });\r\n  }, []);\r\n\r\n  function changeSelect(e: ChangeEvent<HTMLSelectElement>) {\r\n    fetch(\"https://api.open5e.com/monsters/?name=\" + e.target.value)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setEditText(JSON.stringify(data.results[0]));\r\n      });\r\n  }\r\n  /* End Fetches */\r\n\r\n  let names: ReactElement[] = [];\r\n  if (monsterList !== null && monsterList !== undefined) {\r\n    names = monsterList.map((value: MonsterData) => (\r\n      <option key={value.name}>{value.name}</option>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"app-header\">\r\n      <Toolbar className=\"tool\">\r\n        <Box className=\"header-left\">\r\n          <select onChange={changeSelect}>\r\n            <option value=\"\" disabled selected>\r\n              Select a Monster\r\n            </option>\r\n            {names}\r\n          </select>\r\n          <AddCircleIcon\r\n            fontSize=\"large\"\r\n            className=\"header-icon\"\r\n            onClick={(e) => saveMonster(editText)}\r\n          />\r\n        </Box>\r\n        <IconButton className=\"menu\" onClick={handleClick}>\r\n          <MoreVertIcon fontSize=\"large\" />\r\n        </IconButton>\r\n      </Toolbar>\r\n      <HeaderMenu\r\n        isOpen={isOpen}\r\n        anchorEl={anchorEl}\r\n        handleClose={handleClose}\r\n      />\r\n    </AppBar>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { EditContext } from \"../../context/EditContext\";\r\n\r\nexport function Editor() {\r\n  const { isEditing, editText, textChange } = useContext(EditContext);\r\n\r\n  return (\r\n    <div>\r\n      {isEditing && (\r\n        <div className=\"search\">\r\n          <textarea\r\n            className=\"edit-area\"\r\n            rows={10}\r\n            onChange={textChange}\r\n            value={editText}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { DieRoll, rollToIconClass } from \"../../util/Roller\";\r\nimport \"../../dicefont/dicefont.css\";\r\nimport { DieIcon } from \"../../common/DieIcon\";\r\nimport { Fragment } from \"react\";\r\n\r\ninterface IProps {\r\n  rolls: DieRoll[];\r\n}\r\n\r\nexport function RollText({ rolls }: IProps) {\r\n  let rollIcons = rolls.map((roll, index) => (\r\n    <Fragment>\r\n      {index === 0 ? \"\" : \"+\"}\r\n      <DieIcon key={index} roll={roll} />\r\n    </Fragment>\r\n  ));\r\n\r\n  return <>{rollIcons}</>;\r\n}\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { MultiRoll } from \"../../util/Roller\";\r\nimport { RollText } from \"./RollText\";\r\n\r\nexport function ActionRollLogItem({\r\n  rolls,\r\n  titled,\r\n}: {\r\n  rolls: MultiRoll;\r\n  titled: boolean;\r\n}) {\r\n  let totals = rolls.rolls.map((roll, index) => {\r\n    return (index != 0 ? \"|\" : \"\") + roll.total.toString();\r\n  });\r\n\r\n  let rollText = rolls.rolls.map((roll, index) => (\r\n    <>\r\n      {index != 0 ? \"|\" : \"\"}\r\n      <RollText rolls={roll.dice} />\r\n    </>\r\n  ));\r\n\r\n  return (\r\n    <Typography className={titled ? \"titled-log-roll\" : \"untitled-log-roll\"}>\r\n      {rolls.title && rolls.title + \" \"}\r\n      {totals} ({rollText})\r\n      {rolls.bonus != 0 ? (\r\n        (rolls.bonus > 0 ? \"+\" : \"-\") + Math.abs(rolls.bonus)\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </Typography>\r\n  );\r\n}\r\n","import { Typography } from \"@material-ui/core\";\r\n\r\nexport function ActionRollTitle({\r\n  actorName,\r\n  actionName,\r\n}: {\r\n  actorName?: string;\r\n  actionName?: string;\r\n}) {\r\n  if (!actorName && !actionName) {\r\n    return <></>;\r\n  }\r\n\r\n  let titleString = \"\";\r\n  if (actorName && actionName) {\r\n    titleString = actorName + \" - \" + actionName + \":\";\r\n  } else if (actorName) {\r\n    titleString = actorName + \":\";\r\n  } else {\r\n    titleString = actionName + \":\";\r\n  }\r\n\r\n  return <Typography variant=\"h6\"> {titleString}</Typography>;\r\n}\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { ActionResults } from \"../../context/RollLogContext\";\r\nimport { ActionRollLogItem } from \"./ActionRollLogItem\";\r\nimport { ActionRollTitle } from \"./ActionRollTitle\";\r\n\r\nexport function ActionRollLog({\r\n  actionResults,\r\n}: {\r\n  actionResults: ActionResults;\r\n}) {\r\n  let hasTitle: boolean =\r\n    actionResults.monsterName != undefined ||\r\n    actionResults.actionName != undefined;\r\n\r\n  let rollText = actionResults.rolls.map((roll, index) => (\r\n    <>\r\n      <ActionRollLogItem titled={hasTitle} key={index} rolls={roll} />\r\n    </>\r\n  ));\r\n  return (\r\n    <>\r\n      <ActionRollTitle\r\n        actorName={actionResults.monsterName}\r\n        actionName={actionResults.actionName}\r\n      />\r\n      {rollText}\r\n    </>\r\n  );\r\n}\r\n","import { Paper, Typography } from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\nimport { RollLogContext } from \"../../context/RollLogContext\";\r\nimport \"./css/RollLog.css\";\r\nimport { rollAttack, rollDice } from \"../../util/Roller\";\r\nimport { AttackRollText } from \"./AttackRollText\";\r\nimport { ActionRollLog } from \"./ActionRollLog\";\r\n\r\nexport function RollLog() {\r\n  /* roll log */\r\n  const { rollLog } = useContext(RollLogContext);\r\n\r\n  let log = rollLog.map((logItem) => <ActionRollLog actionResults={logItem} />);\r\n\r\n  return (\r\n    <div className=\"sticky\">\r\n      <Typography variant=\"caption\">Rolls</Typography>\r\n      <Paper className=\"scroller\">{log}</Paper>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { MonsteArea } from \"./components/dashboard/MonsteArea\";\nimport { Header } from \"./components/header/Header\";\nimport { Editor } from \"./components/editor/Editor\";\nimport { RollLog } from \"./components/roll_log/RollLog\";\n\n/*TODOS\n *\n * Add card for basic rolls\n * add notes for description/attack descriptions/phrases\n * Spells\n * parse non-exlicit rolls\n * clean up console errors\n * full stat popout\n * Drag and drop cards\n * Update edit text visual design\n * Clean up dependencies\n * Hide/unlock rolls while editing fields?\n * Top bar burger bar for\n * Add/edit icons for top bar\n * Top right menu hides easily\n * Improve readability of roll log\n * apply type doc\n * Organize css\n *\n *\n */\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"contain\">\n        <Editor />\n        <MonsteArea />\n      </div>\n      <RollLog />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RollLogProvider } from \"./context/RollLogContext\";\nimport { DashboardProvider } from \"./context/DashboarContex\";\nimport { EditProvider } from \"./context/EditContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RollLogProvider>\n      <DashboardProvider>\n        <EditProvider>\n          <App />\n        </EditProvider>\n      </DashboardProvider>\n    </RollLogProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}